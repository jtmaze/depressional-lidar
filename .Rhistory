core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, 'core_stage_m')
) %>%
ungroup()
# Check the well's adjusted stage vs. soil core measured stage for sample date
well_stage_on_date <- stage_temp %>% filter(day == sample_date) %>% pull(well_depth_m)
predicted_core_stage <- well_stage_on_date - core_well_elevation_diff
# 2.1
compute_core_hydrograph <- function(stage_df, elevation_df, target_well_id, core_id){
# Filter the stage and core data to match
stage_temp <- stage_df %>%
filter(well_id == target_well_id)
elevation_temp <- elevation_df %>%
filter(soil_core_id == core_id,
well_id == target_well_id)
sample_date <- unique(elevation_temp$sample_date)
core_well_elevation_diff <- unique(elevation_temp$soil_core_to_well_elevation_cm)
core_well_elevation_diff <- as.numeric(core_well_elevation_diff) / 100 # cm to meters
core_stage <- unique(elevation_temp$water_depth_on_sample_date_cm)
core_stage <- as.numeric(core_stage) / -100 # cm to meters and change convention (negative means below ground)
# Check the well's adjusted stage vs. soil core measured stage for sample date
well_stage_on_date <- stage_temp %>% filter(day == sample_date) %>% pull(well_depth_m)
predicted_core_stage <- well_stage_on_date - core_well_elevation_diff
if (abs(well_stage_on_date - predicted_core_stage) > 1) { # TODO: Parameterize tolerance?
stop(
"Drastic difference between observed core stage and well + elevation diff:\n",
"  observed core stage (cm): ", well_stage_on_date, "\n",
"  predicted core stage (cm): ", predicted_core_stage, "\n"
)
}
core_hydrograph <- stage_temp %>%
mutate(core_stage_m = well_depth_m - core_well_elevation_diff) %>%
select(c(day, core_stage_m))
return(core_hydrograph)
}
compute_percent_days_inundated <- function(hydrograph, stage_var) {
# allow either a string or an unquoted name
stage_var <- enquo(stage_var)
# filter out NA’s, then count total vs. inundated days
counts <- hydrograph %>%
filter(!is.na(!!stage_var)) %>%
summarise(
total_days = n(),
inundated_days = sum((!!stage_var) > 0)
)
# return fraction (or *100 for percent)
return(counts$inundated_days / counts$total_days * 100)
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, 'core_stage_m')
) %>%
ungroup()
# 2.1
compute_core_hydrograph <- function(stage_df, elevation_df, target_well_id, core_id){
# Filter the stage and core data to match
stage_temp <- stage_df %>%
filter(well_id == target_well_id)
elevation_temp <- elevation_df %>%
filter(soil_core_id == core_id,
well_id == target_well_id)
sample_date <- unique(elevation_temp$sample_date)
core_well_elevation_diff <- unique(elevation_temp$soil_core_to_well_elevation_cm)
core_well_elevation_diff <- as.numeric(core_well_elevation_diff) / 100 # cm to meters
core_stage <- unique(elevation_temp$water_depth_on_sample_date_cm)
core_stage <- as.numeric(core_stage) / -100 # cm to meters and change convention (negative means below ground)
# Check the well's adjusted stage vs. soil core measured stage for sample date
well_stage_on_date <- stage_temp %>% filter(day == sample_date) %>% pull(well_depth_m)
predicted_core_stage <- well_stage_on_date - core_well_elevation_diff
if (abs(well_stage_on_date - predicted_core_stage) > 100) { # TODO: Parameterize tolerance?
stop(
"Drastic difference between observed core stage and well + elevation diff:\n",
"  observed core stage (cm): ", well_stage_on_date, "\n",
"  predicted core stage (cm): ", predicted_core_stage, "\n"
)
}
core_hydrograph <- stage_temp %>%
mutate(core_stage_m = well_depth_m - core_well_elevation_diff) %>%
select(c(day, core_stage_m))
return(core_hydrograph)
}
compute_percent_days_inundated <- function(hydrograph, stage_var) {
# allow either a string or an unquoted name
stage_var <- enquo(stage_var)
# filter out NA’s, then count total vs. inundated days
counts <- hydrograph %>%
filter(!is.na(!!stage_var)) %>%
summarise(
total_days = n(),
inundated_days = sum((!!stage_var) > 0)
)
# return fraction (or *100 for percent)
return(counts$inundated_days / counts$total_days * 100)
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, 'core_stage_m')
) %>%
ungroup()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
# 2.1
compute_core_hydrograph <- function(stage_df, elevation_df, target_well_id, core_id){
# Filter the stage and core data to match
stage_temp <- stage_df %>%
filter(well_id == target_well_id)
elevation_temp <- elevation_df %>%
filter(soil_core_id == core_id,
well_id == target_well_id)
sample_date <- unique(elevation_temp$sample_date)
core_well_elevation_diff <- unique(elevation_temp$soil_core_to_well_elevation_cm)
core_well_elevation_diff <- as.numeric(core_well_elevation_diff) / 100 # cm to meters
core_stage <- unique(elevation_temp$water_depth_on_sample_date_cm)
core_stage <- as.numeric(core_stage) / -100 # cm to meters and change convention (negative means below ground)
# Check the well's adjusted stage vs. soil core measured stage for sample date
well_stage_on_date <- stage_temp %>% filter(day == sample_date) %>% pull(well_depth_m)
predicted_core_stage <- well_stage_on_date - core_well_elevation_diff
if (abs(well_stage_on_date - predicted_core_stage) > 0.5) { # TODO: Parameterize tolerance?
print(
"Drastic difference between observed core stage and well + elevation diff:\n",
"  observed core stage (cm): ", well_stage_on_date, "\n",
"  predicted core stage (cm): ", predicted_core_stage, "\n"
)
high_diff <- "Unreliable measurements"
return(high_diff)
}
core_hydrograph <- stage_temp %>%
mutate(core_stage_m = well_depth_m - core_well_elevation_diff) %>%
select(c(day, core_stage_m))
return(core_hydrograph)
}
compute_percent_days_inundated <- function(hydrograph, stage_var) {
# allow either a string or an unquoted name
stage_var <- enquo(stage_var)
# filter out NA’s, then count total vs. inundated days
counts <- hydrograph %>%
filter(!is.na(!!stage_var)) %>%
summarise(
total_days = n(),
inundated_days = sum((!!stage_var) > 0)
)
# return fraction (or *100 for percent)
return(counts$inundated_days / counts$total_days * 100)
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, 'core_stage_m')
) %>%
ungroup()
compute_percent_days_inundated <- function(hydrograph, stage_var) {
if (is.character(hydrograph) && length(hydrograph) == 1L) {
return("hydrograph_error")
}
# allow either a string or an unquoted name
stage_var <- enquo(stage_var)
# filter out NA’s, then count total vs. inundated days
counts <- hydrograph %>%
filter(!is.na(!!stage_var)) %>%
summarise(
total_days = n(),
inundated_days = sum((!!stage_var) > 0)
)
# return fraction (or *100 for percent)
return(counts$inundated_days / counts$total_days * 100)
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, 'core_stage_m')
) %>%
ungroup()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
rm(list=ls())
library(tidyverse)
library(readxl)
library(rlang)
soil_core_dir <- 'D:/depressional_lidar/data/osbs/in_data/sampling_elevations/faith_osbs_soilcore_elevations.xlsx'
soil_core <- read_excel(
soil_core_dir,
sheet='Sheet1'
)
stage_dir <- "D:/depressional_lidar/data/osbs/in_data/stage_data/osbs_core_wells_consistent_datum.csv"
stage <- read_csv(
stage_dir
# TODO: Obtain spring download for __
# I filter out early data so we have consistent period of record across wetlands, safe comparison
) %>% filter(timestamp_utc >= as.POSIXct('2022-03-09 12:00:00', tz='UTC'))
daily_stage <- stage %>%
# Take daily mean water level for easier computation
mutate(day = as.Date(timestamp_utc)) %>%
group_by(day, well_id) %>%
summarise(
well_depth_m = mean(well_depth_m, na.rm = TRUE),
#max_depth_m = mean(max_depth_m, na.rm = TRUE),
)
soil_core_summary <- soil_core %>%
group_by(soil_core_id) %>%
summarize(
well_id = first(well_id),
sample_date = first(sample_date),
soil_core_to_well_elevation_cm = first(soil_core_to_well_elevation_cm)
)
# 2.1
compute_core_hydrograph <- function(stage_df, elevation_df, target_well_id, core_id){
# Filter the stage and core data to match
stage_temp <- stage_df %>%
filter(well_id == target_well_id)
elevation_temp <- elevation_df %>%
filter(soil_core_id == core_id,
well_id == target_well_id)
sample_date <- unique(elevation_temp$sample_date)
core_well_elevation_diff <- unique(elevation_temp$soil_core_to_well_elevation_cm)
core_well_elevation_diff <- as.numeric(core_well_elevation_diff) / 100 # cm to meters
core_stage <- unique(elevation_temp$water_depth_on_sample_date_cm)
core_stage <- as.numeric(core_stage) / -100 # cm to meters and change convention (negative means below ground)
# Check the well's adjusted stage vs. soil core measured stage for sample date
well_stage_on_date <- stage_temp %>% filter(day == sample_date) %>% pull(well_depth_m)
predicted_core_stage <- well_stage_on_date - core_well_elevation_diff
if (length(well_stage_on_date) == 1 && !is.na(core_stage)) {
if (abs(core_stage - predicted_core_stage) > 0.5) {
warning(sprintf(
"Drastic difference between observed core stage and well + elevation diff.\n  observed core stage (m): %s\n  predicted core stage (m): %s",
round(core_stage, 3), round(predicted_core_stage, 3)
))
return("Unreliable measurements")
}
}
core_hydrograph <- stage_temp %>%
mutate(core_stage_m = well_depth_m - core_well_elevation_diff) %>%
select(c(day, core_stage_m))
return(core_hydrograph)
}
compute_percent_days_inundated <- function(hydrograph, stage_var) {
if (is.character(hydrograph) && length(hydrograph) == 1L) {
return("hydrograph_error")
}
# allow either a string or an unquoted name
stage_var <- enquo(stage_var)
# filter out NA’s, then count total vs. inundated days
counts <- hydrograph %>%
filter(!is.na(!!stage_var)) %>%
summarise(
total_days = n(),
inundated_days = sum((!!stage_var) > 0)
)
# return fraction (or *100 for percent)
return(counts$inundated_days / counts$total_days * 100)
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, 'core_stage_m')
) %>%
ungroup()
compute_percent_days_inundated <- function(hydrograph, stage_var) {
if (is.character(hydrograph) && length(hydrograph) == 1L) {
return("hydrograph_error")
}
# allow either a string or an unquoted name
stage_var <- enquo(stage_var)
# filter out NA’s, then count total vs. inundated days
counts <- hydrograph %>%
filter(!is.na(!!stage_var)) %>%
summarise(
total_days = n(),
inundated_days = sum((!!stage_var) > 0),
.groups = 'drop'
)
# return fraction (or *100 for percent)
return(counts$inundated_days / counts$total_days * 100)
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, 'core_stage_m')
) %>%
ungroup()
compute_percent_days_inundated <- function(hydrograph, stage_var) {
# If hydrograph is a string sentinel, return NA so the column can be numeric
if (is.character(hydrograph) && length(hydrograph) == 1L) {
return(NA_real_)
}
if (!inherits(hydrograph, "data.frame")) {
stop("`hydrograph` must be a data.frame or tibble.")
}
# Allow bare name or string
stage_sym <- rlang::ensym(stage_var)
hydrograph %>%
filter(!is.na(!!stage_sym)) %>%
summarise(pct = mean((!!stage_sym) > 0, na.rm = TRUE) * 100) %>%
dplyr::pull(pct)   # <- length-1 numeric
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, 'core_stage_m')
) %>%
ungroup()
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, core_stage_m)
) %>%
ungroup()
# 2.1
compute_core_hydrograph <- function(stage_df, elevation_df, target_well_id, core_id){
# Filter the stage and core data to match
stage_temp <- stage_df %>%
filter(well_id == target_well_id)
elevation_temp <- elevation_df %>%
filter(soil_core_id == core_id,
well_id == target_well_id)
sample_date <- unique(elevation_temp$sample_date)
core_well_elevation_diff <- unique(elevation_temp$soil_core_to_well_elevation_cm)
core_well_elevation_diff <- as.numeric(core_well_elevation_diff) / 100 # cm to meters
core_stage <- unique(elevation_temp$water_depth_on_sample_date_cm)
core_stage <- as.numeric(core_stage) / -100 # cm to meters and change convention (negative means below ground)
# Check the well's adjusted stage vs. soil core measured stage for sample date
well_stage_on_date <- stage_temp %>% filter(day == sample_date) %>% pull(well_depth_m)
predicted_core_stage <- well_stage_on_date - core_well_elevation_diff
# if (length(well_stage_on_date) == 1 && !is.na(core_stage)) {
#   if (abs(core_stage - predicted_core_stage) > 0.5) {
#     warning(sprintf(
#       "Drastic difference between observed core stage and well + elevation diff.\n  observed core stage (m): %s\n  predicted core stage (m): %s",
#       round(core_stage, 3), round(predicted_core_stage, 3)
#     ))
#     return("Unreliable measurements")
#   }
# }
core_hydrograph <- stage_temp %>%
mutate(core_stage_m = well_depth_m - core_well_elevation_diff) %>%
select(c(day, core_stage_m))
return(core_hydrograph)
}
compute_percent_days_inundated <- function(hydrograph, stage_var) {
# Allow bare name or string
stage_sym <- rlang::ensym(stage_var)
hydrograph %>%
filter(!is.na(!!stage_sym)) %>%
summarise(pct = mean((!!stage_sym) > 0, na.rm = TRUE) * 100) %>%
dplyr::pull(pct)   # <- length-1 numeric
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, core_stage_m)
) %>%
ungroup()
compute_percent_days_inundated <- function(hydrograph, stage_var) {
# Allow bare name or string
stage_sym <- rlang::ensym(stage_var)
hydrograph %>%
filter(!is.na(!!stage_sym)) %>%
summarise(pct = mean((!!stage_sym) > 0, na.rm = TRUE) * 100) %>%
dplyr::pull(pct)   # <- length-1 numeric
pct <- 5
return(pct)
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, core_stage_m)
) %>%
ungroup()
View(soil_core_summary_test)
soil_core_summary <- soil_core %>%
group_by(soil_core_id) %>%
summarize(
well_id = first(well_id),
sample_date = first(sample_date),
soil_core_to_well_elevation_cm = first(soil_core_to_well_elevation_cm)
) %>%
filter(!is.na(soil_core_id))
# 2.1
compute_core_hydrograph <- function(stage_df, elevation_df, target_well_id, core_id){
# Filter the stage and core data to match
stage_temp <- stage_df %>%
filter(well_id == target_well_id)
elevation_temp <- elevation_df %>%
filter(soil_core_id == core_id,
well_id == target_well_id)
sample_date <- unique(elevation_temp$sample_date)
core_well_elevation_diff <- unique(elevation_temp$soil_core_to_well_elevation_cm)
core_well_elevation_diff <- as.numeric(core_well_elevation_diff) / 100 # cm to meters
core_stage <- unique(elevation_temp$water_depth_on_sample_date_cm)
core_stage <- as.numeric(core_stage) / -100 # cm to meters and change convention (negative means below ground)
# Check the well's adjusted stage vs. soil core measured stage for sample date
well_stage_on_date <- stage_temp %>% filter(day == sample_date) %>% pull(well_depth_m)
predicted_core_stage <- well_stage_on_date - core_well_elevation_diff
# if (length(well_stage_on_date) == 1 && !is.na(core_stage)) {
#   if (abs(core_stage - predicted_core_stage) > 0.5) {
#     warning(sprintf(
#       "Drastic difference between observed core stage and well + elevation diff.\n  observed core stage (m): %s\n  predicted core stage (m): %s",
#       round(core_stage, 3), round(predicted_core_stage, 3)
#     ))
#     return("Unreliable measurements")
#   }
# }
core_hydrograph <- stage_temp %>%
mutate(core_stage_m = well_depth_m - core_well_elevation_diff) %>%
select(c(day, core_stage_m))
return(core_hydrograph)
}
compute_percent_days_inundated <- function(hydrograph, stage_var) {
# Allow bare name or string
stage_sym <- rlang::ensym(stage_var)
hydrograph %>%
filter(!is.na(!!stage_sym)) %>%
summarise(pct = mean((!!stage_sym) > 0, na.rm = TRUE) * 100) %>%
dplyr::pull(pct)   # <- length-1 numeric
pct <- 5
return(pct)
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, core_stage_m)
) %>%
ungroup()
compute_percent_days_inundated <- function(hydrograph, stage_var) {
# Allow bare name or string
stage_sym <- rlang::ensym(stage_var)
hydrograph %>%
filter(!is.na(!!stage_sym))
valid_days <- length(hydrograph)
inundated_days <- length(hydrograph %>% filter(!!stage_sm > 0))
pct <- valid_days / inundated_days * 100
return(pct)
}
soil_core_summary_test <- soil_core_summary %>%
rowwise() %>%
mutate(
hydrograph = list(compute_core_hydrograph(
stage_df = daily_stage,
elevation_df = soil_core,
target_well_id = well_id,
core_id = soil_core_id
)),
pct_days_inundated = compute_percent_days_inundated(hydrograph, core_stage_m)
) %>%
ungroup()
